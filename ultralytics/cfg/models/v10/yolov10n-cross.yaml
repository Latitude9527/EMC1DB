# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.250, 1024]

backbone:
  # [from, repeats, module, args] input (640,640)
  - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2    output (320,320)     16
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4   output (160,160)     32
  - [-1, 3, C1DC, [128, True]]   #         output (160,160)    32
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8    output (80,80)     64
  - [-1, 6, C1DC, [256, True]] # output (80,80)                64
  - [-1, 1, SCDown, [512, 3, 2]] # 5-P4/16     output (40,40)  128
  - [-1, 6, C1DC, [512, True]] # output (40,40)                128
  - [-1, 1, SCDown, [1024, 3, 2]] # 7-P5/32    (20,20)         256
  - [-1, 3, C1DC, [1024, True, True]] #        (20,20)         256
  - [-1, 1, SPPF, [1024, 5]] # 9                (20,20)        256
  - [-1, 1, PSA, [1024]] # 10                (20,20)           256

# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # output (40,40)    256
  - [[-1, 6], 1, Concat, [1]] # cat backbone P4          (40,40)    128+256=384
  - [-1, 3, C1DC, [512]] # 13                            (40,40)    128

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # output (80,80)     128
  - [[-1, 4], 1, Concat, [1]] # cat backbone P3  # output (80,80)   64+128=192
  - [-1, 3, C1DC, [256]] # 16 (P3/8-small)                (80,80)   64

  - [-1, 1, Conv, [256, 3, 2]] #                          (40,40)   64
  - [[-1, 13], 1, Concat, [1]] # cat head P4              (40,40)   128+64=192
  - [-1, 3, C1DC, [512]] # 19 (P4/16-medium)              (40,40)   128

  - [-1, 1, SCDown, [512, 3, 2]] #                        (20,20)   128
  - [[-1, 10], 1, Concat, [1]] # cat head P5              (20,20)   128+256=384
  - [-1, 3, C1DC, [1024, True, True]] # 22 (P5/32-large)  (20,20)   256

  - [[16, 19, 22], 1, v10Detect, [nc]] # Detect(P3, P4, P5)
